- name: Mount ISO and Clean
  hosts: all
  gather_facts: no
  become: yes
  become_method: runas
  become_user: Administrator

  tasks:
  - name: Mount the ISO
    win_shell: |
      $isoPath = 'C:\temp\en_windows_server_2019_updated_nov_2020_x64_dvd_8600b05f.iso'
      $mountResult = Mount-DiskImage -ImagePath $isoPath -PassThru
      $volume = $mountResult | Get-Volume
      $volume | Select-Object DriveLetter, FileSystemLabel
    register: mount_result

  - name: List all volumes and labels
    win_shell: |
      Get-Volume | Select-Object DriveLetter, FileSystemLabel
    register: volume_list

  - name: Show volume list
    debug:
      msg: "{{ volume_list.stdout }}"

  - name: Rename mounted ISO volume
    win_shell: |
      $mountedVolumes = Get-Volume | Where-Object { $_.DriveLetter -ne $null }
      foreach ($volume in $mountedVolumes) {
        if ($volume.FileSystemLabel -like "*X64FREV*") {
          try {
            $volume | Set-Volume -NewFileSystemLabel 'WSserver2019'
            $volume.DriveLetter
            break
          } catch {
            Write-Output "Failed to rename volume: $_"
          }
        }
      }
    register: iso_drive

  - name: Check if ISO drive was renamed
    fail:
      msg: "Could not find or rename the ISO volume. Ensure the ISO is mounted."
    when: iso_drive.stdout.strip() == ""

  - name: Clean up ISO drive letter
    win_shell: |
      $driveLetter = "{{ iso_drive.stdout.strip() }}:"
      $driveLetter
    register: cleaned_drive_letter

  - name: Show ISO drive letter
    debug:
      msg: "ISO Drive Letter: {{ cleaned_drive_letter.stdout.strip() }}"

  - name: Check if the NTDS service is present (indicating a Domain Controller)
    win_service:
      name: NTDS
    register: ntds_service
    ignore_errors: yes

  - name: Debug the output to check if NTDS service is found
    debug:
      var: ntds_service

  - name: Skip AD Preparation if the NTDS service is not found (not a Domain Controller)
    win_command: echo "Not an Active Directory Domain Controller, skipping AD Prep steps."
    when: ntds_service.exists is not defined or ntds_service.exists == false
    changed_when: false

  - name: Run ADPREP /forestprep
    win_shell: |
      cd {{ cleaned_drive_letter.stdout.strip() }}\support\adprep
      ./adprep.exe /forestprep
    when: ntds_service.exists is defined and ntds_service.exists == true
    args:
      chdir: "{{ cleaned_drive_letter.stdout.strip() }}\\support\\adprep"
    register: forestprep_output

  - name: Display the output of forestprep
    debug:
      var: forestprep_output.stdout
    when: ntds_service.exists is defined and ntds_service.exists == true

  - name: Run ADPREP /domainprep
    win_shell: |
      cd {{ cleaned_drive_letter.stdout.strip() }}\support\adprep
      ./adprep.exe /domainprep
    when: ntds_service.exists is defined and ntds_service.exists == true
    args:
      chdir: "{{ cleaned_drive_letter.stdout.strip() }}\\support\\adprep"
    register: domainprep_output

  - name: Display the output of domainprep
    debug:
      var: domainprep_output.stdout
    when: ntds_service.exists is defined and ntds_service.exists == true
