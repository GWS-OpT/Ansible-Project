- name: Complete Windows Server Upgrade Process
  hosts: all
  become: yes
  become_method: runas
  become_user: Administrator # Replace with the appropriate admin user

  tasks:
  - name: Ping the Windows hosts
    win_ping:

  - name: Ensure WinRM is enabled on Windows hosts
    win_shell: Get-Service -Name WinRM | Select-Object -ExpandProperty Status
    register: winrm_status

  - name: Display WinRM status
    debug:
      msg: "WinRM service status is {{ winrm_status.stdout }}."

  - name: Enable WinRM if it is not running
    win_shell: |
      Set-Service -Name WinRM -StartupType Automatic
      Start-Service -Name WinRM
    when: winrm_status.stdout != "Running"

  - name: Verify WinRM is enabled and running
    win_shell: Get-Service -Name WinRM | Select-Object -ExpandProperty Status
    register: winrm_final_status
    changed_when: False

  - name: Display final WinRM status
    debug:
      msg: "Final WinRM service status is {{ winrm_final_status.stdout }}."

  - name: Display all gathered facts
    debug:
      var: ansible_facts

  - name: Display specific fact - Operating System
    debug:
      msg: "The operating system is {{ ansible_facts['os_family'] }} {{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }}."

  - name: Display specific fact - Total RAM
    debug:
      msg: "Total RAM in GB: {{ (ansible_facts['memtotal_mb'] | float / 1024) | round(2) }}"

  - name: Check installed RAM
    win_shell: 'Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty TotalPhysicalMemory'
    register: total_ram

  - name: Check CPU count
    win_shell: 'Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty NumberOfProcessors'
    register: cpu_count

  - name: Ensure at least 2 CPUs are available
    fail:
      msg: "At least 2 CPUs are required for the upgrade."
    when: cpu_count.stdout|int < 2

  - name: Check free disk space on C
    win_shell: '(Get-PSDrive C).Free'
    register: disk_space

  - name: Display system requirements
    debug:
      msg:
      - "Total RAM: {{ total_ram.stdout|int // (1024*1024*1024) }} GB"
      - "CPU Count: {{ cpu_count.stdout }}"
      - "Disk Space Information: {{ disk_space.stdout }}"

  - name: Ensure at least 32GB of free disk space is available on C
    fail:
      msg: "At least 32GB of free disk space is required for the upgrade."
    when: disk_space.stdout|int < 34359738368 # 32GB in bytes

  - name: Check disk space
    win_command: powershell.exe -Command "Get-PSDrive C"
    register: disk_check

  - name: Display disk space
    debug:
      msg: "Disk space: {{ disk_check.stdout }}"

  - name: Ensure directory exists for download
    win_file:
      path: C:\temp
      state: directory
      force: yes

  - name: Check if the ISO file is already downloaded
    win_stat:
      path: C:\temp\en_windows_server_2019_updated_nov_2020_x64_dvd_8600b05f.iso
    register: iso_file_stat

  - name: Download Windows Server upgrade media if not already present
    win_shell: |
      $source = '\\192.168.100.8\isos\en_windows_server_2019_updated_nov_2020_x64_dvd_8600b05f.iso'
      $destination = 'C:\temp\en_windows_server_2019_updated_nov_2020_x64_dvd_8600b05f.iso'
      Copy-Item -Path $source -Destination $destination
    args:
      executable: powershell.exe
    when: not iso_file_stat.stat.exists

  - name: Verify downloaded file
    win_stat:
      path: C:\temp\en_windows_server_2019_updated_nov_2020_x64_dvd_8600b05f.iso
    register: file_stat

  - name: Verify Windows Server version
    win_shell: |
      $os = Get-CimInstance -ClassName Win32_OperatingSystem
      $os.Caption
    register: version_info

  - name: Show current Windows Server version
    debug:
      msg: "Current Windows Server version: {{ version_info.stdout }}"

  - name: Mount the ISO
    win_shell: |
      $isoPath = 'C:\temp\en_windows_server_2019_updated_nov_2020_x64_dvd_8600b05f.iso'
      $mountResult = Mount-DiskImage -ImagePath $isoPath -PassThru
      $volume = $mountResult | Get-Volume
      $volume | Select-Object DriveLetter, FileSystemLabel
    register: mount_result

  - name: List all volumes and labels
    win_shell: |
      Get-Volume | Select-Object DriveLetter, FileSystemLabel
    register: volume_list

  - name: Show volume list
    debug:
      msg: "{{ volume_list.stdout }}"

  - name: Clean up ISO drive letter
    win_shell: |
      $driveLetter = "{{ iso_drive.stdout.strip() }}:"
      $driveLetter
    register: cleaned_drive_letter

  - name: Show ISO drive letter
    debug:
      msg: "ISO Drive Letter: {{ cleaned_drive_letter.stdout.strip() }}"

  - name: Check if the NTDS service is present (indicating a Domain Controller)
    win_service:
      name: NTDS
    register: ntds_service
    ignore_errors: yes

  - name: Debug the output to check if NTDS service is found
    debug:
      var: ntds_service

  - name: Skip AD Preparation if the NTDS service is not found (not a Domain Controller)
    win_shell: Write-Output "Not an Active Directory Domain Controller, skipping AD Prep steps."
    when: ntds_service.exists is not defined or ntds_service.exists == false
    changed_when: false

  - name: Run ADPREP /forestprep
    win_shell: |
      echo C | {{ cleaned_drive_letter.stdout.strip() }}\support\adprep\adprep.exe /forestprep
    when: ntds_service.exists is defined and ntds_service.exists == true
    args:
      chdir: "{{ cleaned_drive_letter.stdout.strip() }}\\support\\adprep"
    register: forestprep_output

  - name: Display the output of forestprep
    debug:
      var: forestprep_output.stdout
    when: ntds_service.exists is defined and ntds_service.exists == true

  - name: Run ADPREP /domainprep
    win_shell: |
      echo C | {{ cleaned_drive_letter.stdout.strip() }}\support\adprep\adprep.exe /domainprep
    when: ntds_service.exists is defined and ntds_service.exists == true
    args:
      chdir: "{{ cleaned_drive_letter.stdout.strip() }}\\support\\adprep"
    register: domainprep_output

  - name: Display the output of domainprep
    debug:
      var: domainprep_output.stdout
    when: ntds_service.exists is defined and ntds_service.exists == true

  - name: Start the upgrade process
    win_command: "{{ cleaned_drive_letter.stdout.strip() }}\\setup.exe /quiet /auto upgrade /dynamicupdate disable /migratedrivers all /showoobe none /pkey WMDGN-G9PQG-XVVXX-R3X43-63DFG /imageindex 4 /compat ignorewarning"
    register: upgrade_process
