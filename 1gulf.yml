---
- name: Windows Server Upgrade (In-Place)
  hosts: all
  gather_facts: no
  vars:
    ansible_python_interpreter: "C:\\Python27\\python.exe"  # Adjust this path to your Python installation on Windows

  tasks:
    - name: Ensure directory exists for download
      win_file:
        path: C:\temp
        state: directory
        force: yes

    - name: Check if the ISO file is already downloaded
      win_stat:
        path: C:\temp\en_windows_server_2019_updated_nov_2020_x64_dvd_8600b05f.iso
      register: iso_file_stat

    - name: Download Windows Server upgrade media if not already present
      win_shell: |
        $source = '\\192.168.100.8\isos\en_windows_server_2019_updated_nov_2020_x64_dvd_8600b05f.iso'
        $destination = 'C:\temp\en_windows_server_2019_updated_nov_2020_x64_dvd_8600b05f.iso'
        Copy-Item -Path $source -Destination $destination
      args:
        executable: powershell.exe
      when: not iso_file_stat.stat.exists

    - name: Verify downloaded file
      win_stat:
        path: C:\temp\en_windows_server_2019_updated_nov_2020_x64_dvd_8600b05f.iso
      register: file_stat

    - name: Verify Windows Server version
      win_shell: |
        $os = Get-CimInstance -ClassName Win32_OperatingSystem
        $os.Caption
      register: version_info

    - name: Show current Windows Server version
      debug:
        msg: "Current Windows Server version: {{ version_info.stdout }}"

    - name: Mount the ISO
      win_shell: |
        $isoPath = 'C:\temp\en_windows_server_2019_updated_nov_2020_x64_dvd_8600b05f.iso'
        $mountResult = Mount-DiskImage -ImagePath $isoPath -PassThru
        $volume = $mountResult | Get-Volume
        $volume | Select-Object DriveLetter, FileSystemLabel
      register: mount_result

    - name: List all volumes and labels
      win_shell: |
        Get-Volume | Select-Object DriveLetter, FileSystemLabel
      register: volume_list

    - name: Show volume list
      debug:
        msg: "{{ volume_list.stdout }}"

    - name: Rename mounted ISO volume
      win_shell: |
        $mountedVolumes = Get-Volume | Where-Object { $_.DriveLetter -ne $null }
        foreach ($volume in $mountedVolumes) {
          if ($volume.FileSystemLabel -like "*X64FREV*") {
            try {
              $volume | Set-Volume -NewFileSystemLabel 'WSserver2019'
              $volume.DriveLetter
              break
            } catch {
              Write-Output "Failed to rename volume: $_"
            }
          }
        }
      register: iso_drive

    - name: Check if ISO drive was renamed
      fail:
        msg: "Could not find or rename the ISO volume. Ensure the ISO is mounted."
      when: iso_drive.stdout.strip() == ""

    - name: Clean up ISO drive letter
      win_shell: |
        $driveLetter = "{{ iso_drive.stdout.strip() }}:"
        $driveLetter
      register: cleaned_drive_letter

    - name: Show ISO drive letter
      debug:
        msg: "ISO Drive Letter: {{ cleaned_drive_letter.stdout.strip() }}"

    - name: Start the upgrade process
      win_command: "{{ cleaned_drive_letter.stdout.strip() }}\\setup.exe /quiet /auto upgrade /dynamicupdate disable /migratedrivers all /showoobe none /pkey WMDGN-G9PQG-XVVXX-R3X43-63DFG /imageindex 4 /compat ignorewarning"
      register: upgrade_process

    - name: Wait for upgrade process to complete
      wait_for:
        port: 3389  # Assuming RDP is used for verification; adjust as needed
        delay: 120  # Wait for 2 minutes
        timeout: 3600  # Wait up to 1 hour
      when: upgrade_process.rc == 0

    - name: Verify Windows Server version (after upgrade)
      win_shell: |
        $os = Get-CimInstance -ClassName Win32_OperatingSystem
        $os.Caption
      register: version_info_after_upgrade

    - name: Show upgraded Windows Server version
      debug:
        msg: "Upgraded to Windows Server {{ version_info_after_upgrade.stdout }}"

  post_tasks:
    - name: Reboot the server if needed
      win_reboot:
        reboot_timeout: 600
      when: upgrade_process.rc == 0

    - name: Verify Windows Server version (again, after reboot)
      win_shell: |
        $os = Get-CimInstance -ClassName Win32_OperatingSystem
        $os.Caption
      register: version_info_final

    - name: Show final Windows Server version
      debug:
        msg: "Final Windows Server version: {{ version_info_final.stdout }}"
